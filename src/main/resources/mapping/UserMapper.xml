<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.user.UserMapper">
  <resultMap id="BaseResultMap" type="com.model.entity.user.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="id_card" jdbcType="VARCHAR" property="idCard" />
    <result column="e_mail" jdbcType="VARCHAR" property="eMail" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="head_url" jdbcType="VARCHAR" property="headUrl" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="mark" jdbcType="VARCHAR" property="mark" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Base_Column_List">
    id, account, nickname, password, real_name, id_card, e_mail, phone, head_url, gender, 
    mark, address, state
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.model.entity.user.User">
    insert into user (id, account, nickname, 
      password, real_name, id_card, 
      e_mail, phone, head_url, 
      gender, mark, address, 
      state)
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{idCard,jdbcType=VARCHAR}, 
      #{eMail,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{headUrl,jdbcType=VARCHAR}, 
      #{gender,jdbcType=VARCHAR}, #{mark,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.model.entity.user.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="realName != null">
        real_name,
      </if>
      <if test="idCard != null">
        id_card,
      </if>
      <if test="eMail != null">
        e_mail,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="headUrl != null">
        head_url,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="mark != null">
        mark,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="eMail != null">
        #{eMail,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="headUrl != null">
        #{headUrl,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="mark != null">
        #{mark,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.entity.user.User">
    update user
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        real_name = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="eMail != null">
        e_mail = #{eMail,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="headUrl != null">
        head_url = #{headUrl,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="mark != null">
        mark = #{mark,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.entity.user.User">
    update user
    set account = #{account,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      real_name = #{realName,jdbcType=VARCHAR},
      id_card = #{idCard,jdbcType=VARCHAR},
      e_mail = #{eMail,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      head_url = #{headUrl,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      mark = #{mark,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByNickName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    where nickname=#{nickName}
  </select>
  <select id="selectByAccount" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    where account=#{account}
  </select>
  <select id="selectByAccountAndPassword" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    where account=#{account}
    and password=#{password}
  </select>
  <select id="userList" resultType="com.model.vo.user.UserListVO">
    select
    id id,
    head_url headUrl,
    nickname nickname,
    mark mark
    from  `user`
    <where>
      <if test="nickname!=null">
        nickname like concat('%', #{nickname},'%')
      </if>
    </where>
  </select>
</mapper>